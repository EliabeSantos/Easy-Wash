[{"/home/kevin/Projects/Kenzie/Q2/easy-wash/easy-wash/src/reportWebVitals.js":"1","/home/kevin/Projects/Kenzie/Q2/easy-wash/easy-wash/src/pages/landing/index.jsx":"2","/home/kevin/Projects/Kenzie/Q2/easy-wash/easy-wash/src/pages/register/index.jsx":"3","/home/kevin/Projects/Kenzie/Q2/easy-wash/easy-wash/src/pages/servicesList/style.js":"4","/home/kevin/Projects/Kenzie/Q2/easy-wash/easy-wash/src/components/sharedButton/index.jsx":"5","/home/kevin/Projects/Kenzie/Q2/easy-wash/easy-wash/src/store/modules/cart/actions.js":"6"},{"size":362,"mtime":1610395583788,"results":"7","hashOfConfig":"8"},{"size":1211,"mtime":1610665041544,"results":"9","hashOfConfig":"8"},{"size":10170,"mtime":1610711932430,"results":"10","hashOfConfig":"8"},{"size":5163,"mtime":1610711932558,"results":"11","hashOfConfig":"8"},{"size":375,"mtime":1610545023390,"results":"12","hashOfConfig":"8"},{"size":116,"mtime":1610665041548,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"qrmd0y",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/kevin/Projects/Kenzie/Q2/easy-wash/easy-wash/src/reportWebVitals.js",[],["28","29"],"/home/kevin/Projects/Kenzie/Q2/easy-wash/easy-wash/src/pages/landing/index.jsx",[],"/home/kevin/Projects/Kenzie/Q2/easy-wash/easy-wash/src/pages/register/index.jsx",["30","31","32"],"import * as yup from \"yup\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { useState, useEffect } from \"react\";\nimport Header from \"../../components/header\";\nimport CepCoords from \"coordenadas-do-cep\";\nimport axios from \"axios\";\nimport SharedInput from \"../../components/sharedInput\";\nimport SharedButton from \"../../components/sharedButton\";\n\nimport { Form, Container, Title, OuterContainer } from \"./style.js\";\n\nconst Register = ({ type }) => {\n  const [cep, setCep] = useState(\"\");\n  const [street, setStreet] = useState(\"\");\n  const [district, setDistrict] = useState(\"\");\n  const [city, setCity] = useState(\"\");\n  const [uf, setUF] = useState(\"\");\n  const [coords, setCoords] = useState({});\n\n  const autoCompleteAddress = async () => {\n    if (cep.length === 8) {\n      try {\n        const data = await CepCoords.getByCep(cep);\n        setStreet(data.logradouro);\n        setDistrict(data.bairro);\n        setCity(data.localidade);\n        setUF(data.uf);\n        setCoords({ latitude: data.lat, longitude: data.lon });\n      } catch (err) {}\n    }\n  };\n\n  const schema = yup.object().shape({\n    name: yup\n      .string()\n      .required(\"Campo obrigatório\")\n      .min(6, \"Mínimo de 6 caractéres\"),\n    email: yup.string().required(\"Campo obrigatório\").email(\"Email inválido\"),\n    phone: yup\n      .string()\n      .required(\"Campo obrigatório\")\n      .typeError(\"Apenas números\"),\n    cpf: yup\n      .string()\n      .required(\"Campo obrigatório\")\n      .matches(\n        /^([0-9]{3}\\.?[0-9]{3}\\.?[0-9]{3}\\-?[0-9]{2}|[0-9]{2}\\.?[0-9]{3}\\.?[0-9]{3}\\/?[0-9]{4}\\-?[0-9]{2})$/,\n        \"Formato invalido\"\n      ),\n    password: yup.string().required(\"Campo obrigatório\"),\n    rePassword: yup\n      .string()\n      .required(\"Campo obrigatório\")\n      .oneOf([yup.ref(\"password\")], \"Senhas não compativeis\"),\n\n    zipcode: yup.string().length(8, \"Necessário 8 caracteres\"),\n    street: yup.string().required(\"Campo obrigatório\"),\n    number: yup\n      .number()\n      .required(\"Campo obrigatório\")\n      .typeError(\"Apenas números\")\n      .integer(\"Apenas números inteiros\"),\n    district: yup.string().required(\"Campo obrigatório\"),\n    city: yup.string().required(\"Campo obrigatório\"),\n    uf: yup\n      .string(\"Apenas letras\")\n      .required(\"Campo obrigatório\")\n      .length(2, \"Apenas dois caracteres\"),\n    radius: yup\n      .number()\n      .required(\"Campo obrigatório\")\n      .typeError(\"Apenas números\")\n      .integer(\"Apenas números inteiros\"),\n    deliveryfee: yup\n      .number()\n      .required(\"Campo obrigatório\")\n      .typeError(\"Apenas números\"),\n    initial: yup.string().required(\"Campo obrigatório\"),\n    end: yup.string().required(\"Campo obrigatório\"),\n  });\n\n  useEffect(() => {\n    autoCompleteAddress();\n  }, [cep]);\n\n  const handleSetCep = (evt) => {\n    setCep(evt.target.value);\n  };\n\n  const { register, errors, handleSubmit } = useForm({\n    resolver: yupResolver(schema),\n  });\n\n  const handleFormSubmit = (data) => {\n    const formattedObject = {\n      email: data.email,\n      password: data.password,\n      company: data.name,\n      type: \"PJ\",\n      phone: data.phone,\n      address: {\n        zipcode: cep,\n        street: data.street,\n        number: data.number,\n        district: data.district,\n        city: data.city,\n        UF: data.info,\n        coords: coords,\n      },\n      radius: data.radius,\n      deliveryfee: data.deliveryfee,\n      schedule: {\n        initial: data.initial,\n        end: data.end,\n      },\n      services: [],\n    };\n    axios.post(\n      \"https://easy-wash-server.herokuapp.com/register\",\n      formattedObject\n    );\n  };\n\n  return (\n    <OuterContainer>\n      <Header />\n      <Container>\n        <Title>REGISTRO</Title>\n        <Form onSubmit={handleSubmit(handleFormSubmit)}>\n          <div className=\"container_personal_info\">\n            <h2 className=\"section_title\">Informações de conta</h2>\n\n            <SharedInput\n              label=\"Nome\"\n              name=\"name\"\n              _inputRef={register}\n              width=\"31rem\"\n              _helperText={errors.name?.message}\n              _error={!!errors.name}\n              _type=\"text\"\n            />\n            <SharedInput\n              label=\"Email\"\n              name=\"email\"\n              _inputRef={register}\n              width=\"31rem\"\n              _helperText={errors.email?.message}\n              _error={!!errors.email}\n              _type=\"email\"\n            />\n            <SharedInput\n              label=\"Telefone\"\n              name=\"phone\"\n              _inputRef={register}\n              width=\"31rem\"\n              _helperText={errors.phone?.message}\n              _error={!!errors.phone}\n              _type=\"string\"\n            />\n            <SharedInput\n              label={type === \"PJ\" ? \"CNPJ\" : \"CPF\"}\n              name=\"cpf\"\n              _inputRef={register}\n              width=\"31rem\"\n              _helperText={errors.cpf?.message}\n              _error={!!errors.cpf}\n              _type=\"text\"\n            />\n            <SharedInput\n              label=\"Senha\"\n              name=\"password\"\n              _inputRef={register}\n              width=\"31rem\"\n              _helperText={errors.password?.message}\n              _error={!!errors.password}\n              _type=\"password\"\n            />\n            <SharedInput\n              label=\"Repetir senha\"\n              name=\"rePassword\"\n              width=\"31rem\"\n              _inputRef={register}\n              _helperText={errors.rePassword?.message}\n              _error={!!errors.rePassword}\n              _type=\"password\"\n            />\n          </div>\n\n          <div className=\"container_address_info\">\n            <h2 className=\"section_title\">Informações de endereço</h2>\n            <SharedInput\n              label=\"CEP\"\n              name=\"zipcode\"\n              value={cep}\n              _onChange={(evt) => handleSetCep(evt)}\n              width=\"31rem\"\n              _helperText={errors.zipcode?.message}\n              _error={!!errors.zipcode}\n              _type=\"number\"\n              _maxLength=\"8\"\n            />\n            <div className=\"single_liner\">\n              <SharedInput\n                label=\"Rua\"\n                name=\"street\"\n                value={street}\n                _inputRef={register}\n                _onChange={(evt) => setStreet(evt.target.value)}\n                width=\"20rem\"\n                _helperText={errors.street?.message}\n                _error={!!errors.street}\n                _type=\"text\"\n              />\n\n              <SharedInput\n                label=\"Numero\"\n                name=\"number\"\n                type=\"number\"\n                _inputRef={register}\n                width=\"10rem\"\n                _helperText={errors.number?.message}\n                _error={!!errors.number}\n                _type=\"number\"\n                _min=\"0\"\n              />\n            </div>\n            <SharedInput\n              label=\"Bairro\"\n              name=\"district\"\n              _inputRef={register}\n              value={district}\n              _onChange={(evt) => setDistrict(evt.target.value)}\n              width=\"31rem\"\n              _helperText={errors.district?.message}\n              _error={!!errors.district}\n              _type=\"text\"\n            />\n            <div className=\"single_liner\">\n              <SharedInput\n                label=\"Cidade\"\n                name=\"city\"\n                _inputRef={register}\n                value={city}\n                _onChange={(evt) => setCity(evt.target.value)}\n                width=\"20rem\"\n                _helperText={errors.city?.message}\n                _error={!!errors.city}\n                _type=\"text\"\n              />\n              <SharedInput\n                label=\"UF\"\n                name=\"uf\"\n                _inputRef={register}\n                value={uf}\n                _onChange={(evt) => setUF(evt.target.value)}\n                width=\"10rem\"\n                _helperText={errors.uf?.message}\n                _error={!!errors.uf}\n                _type=\"text\"\n                _maxLength=\"2\"\n              />\n            </div>\n          </div>\n\n          <div className=\"container_service_info\">\n            <h2 className=\"section_title\">Informações de serviço</h2>\n            <div className=\"single_liner double_liner\">\n              <SharedInput\n                label=\"Area de serviço (KM)\"\n                name=\"radius\"\n                _inputRef={register}\n                width=\"15rem\"\n                _helperText={errors.radius?.message}\n                _error={!!errors.radius}\n                _type=\"number\"\n                _min=\"0\"\n              />\n              <SharedInput\n                label=\"Valor do frete\"\n                name=\"deliveryfee\"\n                _inputRef={register}\n                width=\"15rem\"\n                _helperText={errors.deliveryfee?.message}\n                _error={!!errors.deliveryfee}\n                _type=\"number\"\n                _min=\"0\"\n              />\n            </div>\n            <h3 className=\"section_subtitle\">Horario de atendimento</h3>\n            <div className=\"single_liner double_liner\">\n              <SharedInput\n                label=\"Inicio\"\n                name=\"initial\"\n                _inputRef={register}\n                width=\"15rem\"\n                _helperText={errors.initial?.message}\n                _error={!!errors.initial}\n                _type=\"time\"\n                _defaultValue=\"07:30\"\n              />\n              <SharedInput\n                label=\"Fim\"\n                name=\"end\"\n                _inputRef={register}\n                width=\"15rem\"\n                _helperText={errors.end?.message}\n                _error={!!errors.end}\n                _type=\"time\"\n                _defaultValue=\"18:30\"\n              />\n            </div>\n          </div>\n\n          <SharedButton\n            type=\"submit\"\n            name=\"Enviar\"\n            _inputRef={register}\n            width=\"15rem\"\n            height=\"3rem\"\n          />\n        </Form>\n      </Container>\n    </OuterContainer>\n  );\n};\nexport default Register;\n","/home/kevin/Projects/Kenzie/Q2/easy-wash/easy-wash/src/pages/servicesList/style.js",[],"/home/kevin/Projects/Kenzie/Q2/easy-wash/easy-wash/src/components/sharedButton/index.jsx",[],"/home/kevin/Projects/Kenzie/Q2/easy-wash/easy-wash/src/store/modules/cart/actions.js",[],{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":48,"column":42,"nodeType":"39","messageId":"40","endLine":48,"endColumn":43,"suggestions":"41"},{"ruleId":"37","severity":1,"message":"38","line":48,"column":95,"nodeType":"39","messageId":"40","endLine":48,"endColumn":96,"suggestions":"42"},{"ruleId":"43","severity":1,"message":"44","line":85,"column":6,"nodeType":"45","endLine":85,"endColumn":11,"suggestions":"46"},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"no-useless-escape","Unnecessary escape character: \\-.","Literal","unnecessaryEscape",["49","50"],["51","52"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'autoCompleteAddress'. Either include it or remove the dependency array.","ArrayExpression",["53"],"no-global-assign","no-unsafe-negation",{"messageId":"54","fix":"55","desc":"56"},{"messageId":"57","fix":"58","desc":"59"},{"messageId":"54","fix":"60","desc":"56"},{"messageId":"57","fix":"61","desc":"59"},{"desc":"62","fix":"63"},"removeEscape",{"range":"64","text":"65"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"66","text":"67"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"68","text":"65"},{"range":"69","text":"67"},"Update the dependencies array to be: [autoCompleteAddress, cep]",{"range":"70","text":"71"},[1572,1573],"",[1572,1572],"\\",[1625,1626],[1625,1625],[2801,2806],"[autoCompleteAddress, cep]"]